plugins {
    id 'java'
}

group = 'onl.oss.catalpa'
version = '2.0.5'

java {
    sourceCompatibility = JavaVersion.VERSION_21
    targetCompatibility = JavaVersion.VERSION_21
}

compileJava {
    options.encoding = 'UTF-8'
    options.compilerArgs << '-Xlint:all'
}

repositories {
    mavenCentral()
}

dependencies {
    implementation fileTree(dir: 'lib',
            includes: ['**/*.jar'],
            excludes: ['**/*-sources.jar', '**/*-javadoc.jar'])

    // flexmark（flexmark-allを使用すると flexmark-pdf-converter などが含まれてライブラリのサイズが非常に大きくなってしまうので必要なライブラリを個別に指定してます）
    implementation 'com.vladsch.flexmark:flexmark:0.64.8'
    implementation 'com.vladsch.flexmark:flexmark-ext-attributes:0.64.8'
    implementation 'com.vladsch.flexmark:flexmark-ext-definition:0.64.8'
    implementation 'com.vladsch.flexmark:flexmark-ext-tables:0.64.8'
    implementation 'com.vladsch.flexmark:flexmark-ext-typographic:0.64.8'
    implementation 'com.vladsch.flexmark:flexmark-ext-wikilink:0.64.8'
    implementation 'com.vladsch.flexmark:flexmark-ext-gfm-strikethrough:0.64.8'
    implementation 'com.vladsch.flexmark:flexmark-ext-gfm-tasklist:0.64.8'

    implementation 'org.freemarker:freemarker:2.3.33'
    implementation 'com.esotericsoftware.yamlbeans:yamlbeans:1.17'

    // アイコン
    implementation 'org.kordamp.ikonli:ikonli-javafx:12.3.1'
    implementation 'org.kordamp.ikonli:ikonli-materialdesign2-pack:12.3.1'
    implementation 'org.kordamp.ikonli:ikonli-coreui-pack:12.3.1'
    implementation 'org.kordamp.ikonli:ikonli-codicons-pack:12.3.1'

    // 画像ファイルのメタ情報を取得して IMGタグの width 属性・height 属性を自動設定するのに必要です。
    implementation 'com.drewnoakes:metadata-extractor:2.19.0'

    // AutoDetectReader で必要です。
    implementation 'com.googlecode.juniversalchardet:juniversalchardet:1.0.3'

    // Netlify と Firebase Hosting で必要です。
    implementation 'com.fasterxml.jackson.core:jackson-core:2.18.0'
    implementation 'com.fasterxml.jackson.core:jackson-annotations:2.18.0'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.18.0'

    // Firebase Hosting で必要です。
    implementation 'com.google.auth:google-auth-library-oauth2-http:1.29.0'

    // ログ出力
    implementation 'org.apache.logging.log4j:log4j-core:2.24.0'

    // Win32
    // ・VSCodeのインストールパスを検索して起動するのに使用しています。
    implementation 'net.java.dev.jna:jna:5.14.0'
}

sourceSets.main.resources {
    srcDirs = ['src/main/resources', 'src/main/java' ]
}

defaultTasks 'clean', 'build', 'copyLibraries_win32', 'exewrap', 'copyResources_license', 'copyResources_etc', 'copyResources_samples'

jar {
    manifest {
        attributes "Specification-Version": "${project.version}"
        attributes "Main-Class": "onl.oss.catalpa.catalpa"
        attributes "Class-Path": sourceSets.main.runtimeClasspath.collect { "lib/$it.name"}.join(' ')
    }
}

tasks.register('copyLibraries_win32', Copy) {
    group = 'build'
    description = 'Copy dependency libraries.'

    from (sourceSets.main.runtimeClasspath) {
        include '*.jar'
        exclude 'macos-*'
    }
    from ('lib') {
        include '*.dll'
        exclude 'macos-*'
    }
    into layout.buildDirectory.dir('package/lib')
}

tasks.register('copyResources_license', Copy) {
    group = 'build'
    description = 'Copy etc folder.'

    from ("${projectDir}") {
        include ('LICENSE.txt')
    }
    from ("${projectDir}/etc") {
        include ('index.html')
    }
    into layout.buildDirectory.dir('package')
}

tasks.register('copyResources_etc', Copy) {
    group = 'build'
    description = 'Copy etc folder.'

    from ("${projectDir}/etc") {
        include ('firebase/**', 'netlify/**')
    }
    into layout.buildDirectory.dir('package/etc')
}

tasks.register('copyResources_samples', Copy) {
    group = 'build'
    description = 'Copy samples folder.'

    from "${projectDir}/samples"
    into layout.buildDirectory.dir('package/samples')
}

tasks.register('createJavaRuntime_win32', Exec) {
    dependsOn = [ tasks.jar, tasks.copyLibraries_win32 ]
    group = 'build'
    description = 'Create Java Runtime.'

    workingDir layout.buildDirectory.dir('package')
    //commandLine 'cmd', '/c', 'CreateJRE.bat'
    commandLine 'cmd', '/c', 'CreateJRE.bat', "${jar.archiveFile.get()}", 'lib', '-client'
    // ランタイムには jdk.crypto.ec モジュールも追加する必要があります。CreateJRE.bat 内で jdk.crypto.ec が追加されていることを確認してください。
    // jdk.crypto.ec モジュールが追加されていないと、Netlify のアップロードが SSLHandshakeException で失敗します。
}

tasks.register('exewrap', Exec) {
    dependsOn = [ tasks.jar ]
    group = 'build'
    description = 'Assembles the executable.'

    executable "${projectDir}/etc/exewrap.exe"
    args "-A", "x64",
            "-g",
            "-t", "21",
            "-a", "-Xmx1024m",
            "-L", "lib",
            "-e", "SINGLE;NOLOG",
            "-j", "${jar.archiveFile.get()}",
            "-i", "etc/app.ico",
            "-o", "${layout.buildDirectory.dir('package').get().file(base.archivesName).get()}.exe",
            "-d", "Catalpa",
            "-p", "Catalpa",
            "-c", "(C) 2019-2024 HIRUKAWA Ryo",
            "-V", "${version}",
            "-v", "${version}"
}
