apply plugin: 'java'

version = '0.9.3'

tasks.withType(JavaCompile) {
	sourceCompatibility = 19
	targetCompatibility = 19
	options.compilerArgs << '-Xlint:all'
}

def defaultEncoding = 'UTF-8'
tasks.withType(AbstractCompile).each { it.options.encoding = defaultEncoding }
tasks.withType(GroovyCompile).each { it.groovyOptions.encoding = defaultEncoding }

sourceSets.main.resources {
	srcDirs = ['src/main/resources', 'src/main/java' ]
}

repositories {
	mavenCentral()
}

dependencies {
	implementation fileTree(dir: 'lib',
		includes: ['**/*.jar'],
		excludes: ['**/*-sources.jar', '**/*-javadoc.jar'])

	implementation 'com.vladsch.flexmark:flexmark:0.64.0'
	implementation 'com.vladsch.flexmark:flexmark-ext-attributes:0.64.0'
	implementation 'com.vladsch.flexmark:flexmark-ext-definition:0.64.0'
	implementation 'com.vladsch.flexmark:flexmark-ext-tables:0.64.0'
	implementation 'com.vladsch.flexmark:flexmark-ext-typographic:0.64.0'
	implementation 'com.vladsch.flexmark:flexmark-ext-wikilink:0.64.0'
	implementation 'com.vladsch.flexmark:flexmark-ext-gfm-strikethrough:0.64.0'
	implementation 'com.vladsch.flexmark:flexmark-ext-gfm-tasklist:0.64.0'

	implementation 'com.github.sommeri:less4j:1.17.2'
	implementation 'org.freemarker:freemarker:2.3.31'
	implementation 'org.nanohttpd:nanohttpd:2.3.1'
	implementation 'net.java.dev.jna:jna:5.12.1'
	implementation 'org.kordamp.ikonli:ikonli-javafx:12.3.1'
	implementation 'org.kordamp.ikonli:ikonli-materialdesign-pack:12.3.1'
	implementation 'com.esotericsoftware.yamlbeans:yamlbeans:1.15'

	// Netlify と Firebase Hosting で必要です。
	implementation 'com.fasterxml.jackson.core:jackson-core:2.14.1'
	implementation 'com.fasterxml.jackson.core:jackson-annotations:2.14.1'
	implementation 'com.fasterxml.jackson.core:jackson-databind:2.14.1'

	// Firebase Hosting で必要です。
	// https://mvnrepository.com/artifact/com.google.auth/google-auth-library-oauth2-http
	implementation group: 'com.google.auth', name: 'google-auth-library-oauth2-http', version: '1.14.0'

	// auto-detect-reader で必要です。
	implementation 'com.googlecode.juniversalchardet:juniversalchardet:1.0.3'
}

defaultTasks 'clean', 'build', 'exewrap'

jar {
	manifest {
		attributes "Specification-Version": "${project.version}"
		attributes "Main-Class": "net.osdn.catalpa.ui.javafx.Main"
		attributes "Class-Path": sourceSets.main.runtimeClasspath.collect { "lib/$it.name" }.join(' ')
	}
	into('net/osdn/catalpa/ui/javafx') {
		from("${projectDir}") {
			include('LICENSE.txt')
		}
	}
}


task copyLibraries(type: Copy) {
	setGroup("build")
	setDescription("Copy dependency libraries.")
	from (sourceSets.main.runtimeClasspath) {
		include '*.jar'
	}
	from('lib') {
		include '*.dll'
	}
	into "${buildDir}/package/lib/"
}

task createJavaRuntime(type: Exec, dependsOn: ['jar', 'copyLibraries']) {
	setGroup("build")
	setDescription("Create Java Runtime.")
	workingDir "${buildDir}/package/"
	commandLine 'cmd', '/c', 'CreateJRE.bat', "${jar.archiveFile.get()}", "lib", "-client"
	// ランタイムには jdk.crypto.ec モジュールも追加する必要があります。CreateJRE.bat 内で jdk.crypto.ec が追加されていることを確認してください。
	// jdk.crypto.ec モジュールが追加されていないと、Netlify のアップロードが SSLHandshakeException で失敗します。
}

task exewrap(type: Exec, dependsOn: 'jar') {
	setGroup("build")
	setDescription('Assembles the executable.')
	executable "${projectDir}/etc/exewrap.exe"
	args "-A", "x64",
		"-g",
		"-t", "17",
		"-a", "-Xmx1024m",
		"-L", "lib",
		"-e", "SHARED",
		"-j", "${jar.archiveFile.get()}",
		"-i", "etc/ico/app.ico",
		"-o", "${buildDir}/package/${archivesBaseName}.exe",
		"-d", "Catalpa",
		"-p", "Catalpa",
		"-c", "(C) 2019-2022 HIRUKAWA Ryo",
		"-V", "${version}",
		"-v", "${version}"
}
sourceCompatibility = JavaVersion.VERSION_15
targetCompatibility = JavaVersion.VERSION_15
